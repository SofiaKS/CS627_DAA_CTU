package coding;

import java.util.Arrays;
import java.util.Random;
import java.util.stream.IntStream;

public class ReverseArray_InPlace_Recursive {

        //this program reverses an array of integer values in a recursive manner
        //The total number of steps will always be total size of an array divided by 2 (arr.length()/2)
        // Every iteration will make exactly one step to swap the positions from beginning and the end.

    static void reverseArray(int arr[], int i) {

        //Will swap first half of the array with the second half. Will call itself until reached the middle of the array
        if (i != arr.length / 2) {
            swapMethod(arr, i, arr.length - i - 1);
            reverseArray(arr, i + 1);
        } else {
            //Print out the reversed array and exit
            System.out.println("Array after reversal: \n" + Arrays.toString(arr));
            return;
        }
    }
        static void swapMethod(int arr[], int i, int j) {

        int temp;
            //store the value to be swapped in a temporary position to vacate the place of array in position i for the element from the end of the list in the position n-1-i (j)
            temp = arr[i];
            //swap the element in position i with the element in position arr.length()-i-1 from the end.
            arr[i] = arr[j];
            //assign a value which is store in a temporary placeholder. Operation complete.
            arr[j] = temp;
        }

        public static void main(String[] args) {
            //this is a code to generate integer values for the array of size n (custom).
            int n = 500;

            Random random = new Random();

            int[] originalArr = IntStream.generate(random::nextInt).limit(n).toArray();
            //print the array before reversal
            System.out.println("Array before reversal: \n" + Arrays.toString(originalArr));

            //Calling the method to reverse the array which was created with the size of n (custom)
            reverseArray(originalArr, 0);
            long time = System.nanoTime();
            time = System.nanoTime() - time;

            System.out.printf("n = %d -> time = %d ns%n", n, time);
        }

    }
//Result:
//n = 500 -> time = 200 ns
//n = 1500 -> time = 200 ns
//n = 2500 -> time = 200 ns
//n = 10000 -> time = 200 ns

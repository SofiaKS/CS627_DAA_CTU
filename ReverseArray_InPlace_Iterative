package coding;

import java.util.Arrays;
import java.util.Random;
import java.util.stream.IntStream;

public class ReverseArray_InPlace {

    //this program reverses an array of integer values
    //this program contains a counter to count the number of steps required for each iteration.
    //The total number of steps will always be total size of an array divided by 2 (arr.length()/2)
    // Every iteration will make exactly one step to swap the positions from beginning and the end.
    static void reverseArray(int arr[], int n) {

        // initialize temp and count variables:
        // temp is a temporary placeholder for a value to be swapped
        // count is to count the number of swaps performed at each iteration
        int temp, count;

        //divide total length of an array by two
        //iterate through elements 1 to the middle

        for (int i = 0; i < n / 2; i++) {
            //at every iteration, the count should be reset
            count = 0;
            //store the value to be swapped in a temporary position to vacate the place of array in position i for the element from the end of the list in the posision n-1-i
            temp = arr[i];
            //swap the element in position i with the element in position arr.length()-i-1 from the end.
            arr[i] = arr[n - i - 1];
            //instead assign a value which is store in a temporary placeholder. Operation complete.
            arr[n - i - 1] = temp;
            //increment the count (will always be equal to 1)
        //    count++;
            //Print the total length of the array (axis x) and count taken to perform this step (axis y)
         //   System.out.printf("(" + n + "," + count + ("),\n"));
        }

        //print the same array after reversal
        System.out.println("Array after reversal: \n" + Arrays.toString(arr));

    }

    public static void main(String[] args) {
        //this is a code to generate integer values for the array of size n (custom).
        int n = 1500;

        Random random = new Random();

        int[] originalArr = IntStream.generate(random::nextInt).limit(n).toArray();
        //print the array before reversal
        System.out.println("Array before reversal: \n" + Arrays.toString(originalArr));

        //Calling the method to reverse the array which was created with the size of n (custom)
        reverseArray(originalArr, n);
        long time = System.nanoTime();
        time = System.nanoTime() - time;

        System.out.printf("n = %d -> time = %d ns%n", n, time);
    }

}
